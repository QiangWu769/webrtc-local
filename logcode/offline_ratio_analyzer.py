import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# ===================================================================
# Core Knowledge Base
# ===================================================================

# 1. BSR lookup table (from your script, complete)
# 3GPP TS 36.321, Table 6.1.3.1-1: Buffer Size Levels for BSR
BSR_LEVEL_TO_BYTES = [
    0, 10, 12, 14, 17, 19, 22, 26, 31, 36, 43, 51, 60, 70, 83, 98, 116, 
    137, 162, 191, 226, 267, 315, 372, 439, 518, 612, 723, 854, 1008,
    1191, 1406, 1661, 1961, 2316, 2735, 3229, 3813, 4502, 5315, 6275,
    7411, 8752, 10335, 12206, 14414, 17022, 20098, 23728, 28014, 33080,
    39054, 46112, 54447, 64286, 75899, 89632, 105821, 124949, 147545,
    150000 # Simplified extended values
]

# 2. TBS lookup table (complete 3GPP standard table)
# 3GPP TS 36.213, Table 7.1.7.2.1-1: Transport block size table
# Complete 38x110 TBS lookup table, extracted from Excel file
TBS_TABLE = [
    [    16,     32,     56,     88,    120,    152,    176,    200,    232,    248,    288,    304,    344,    376,    392,    424,    456,    488,    504,    536,    568,    600,    616,    648,    680,    712,    744,    776,    776,    808,    840,    872,    904,    936,    968,   1000,   1032,   1032,   1064,   1096,   1128,   1160,   1192,   1224,   1256,   1256,   1288,   1320,   1352,   1384,   1416,   1416,   1480,   1480,   1544,   1544,   1608,   1608,   1608,   1672,   1672,   1736,   1736,   1800,   1800,   1800,   1864,   1864,   1928,   1928,   1992,   1992,   2024,   2088,   2088,   2088,   2152,   2152,   2216,   2216,   2280,   2280,   2280,   2344,   2344,   2408,   2408,   2472,   2472,   2536,   2536,   2536,   2600,   2600,   2664,   2664,   2728,   2728,   2728,   2792,   2792,   2856,   2856,   2856,   2984,   2984,   2984,   2984,   2984,   3112], # I_tbs = 0
    [    24,     48,     88,    120,    160,    200,    232,    272,    304,    344,    376,    424,    456,    488,    520,    568,    600,    632,    680,    712,    744,    776,    808,    872,    904,    936,    968,   1000,   1032,   1064,   1128,   1160,   1192,   1224,   1256,   1288,   1352,   1384,   1416,   1416,   1480,   1544,   1544,   1608,   1608,   1672,   1736,   1736,   1800,   1800,   1864,   1864,   1928,   1992,   1992,   2024,   2088,   2088,   2152,   2152,   2216,   2280,   2280,   2344,   2344,   2408,   2472,   2472,   2536,   2536,   2600,   2600,   2664,   2728,   2728,   2792,   2792,   2856,   2856,   2856,   2984,   2984,   2984,   3112,   3112,   3112,   3240,   3240,   3240,   3240,   3368,   3368,   3368,   3496,   3496,   3496,   3496,   3624,   3624,   3624,   3752,   3752,   3752,   3752,   3880,   3880,   3880,   4008,   4008,   4008], # I_tbs = 1
    [    32,     72,    120,    160,    200,    248,    296,    336,    376,    424,    472,    520,    568,    616,    648,    696,    744,    776,    840,    872,    936,    968,   1000,   1064,   1096,   1160,   1192,   1256,   1288,   1320,   1384,   1416,   1480,   1544,   1544,   1608,   1672,   1672,   1736,   1800,   1800,   1864,   1928,   1992,   2024,   2088,   2088,   2152,   2216,   2216,   2280,   2344,   2344,   2408,   2472,   2536,   2536,   2600,   2664,   2664,   2728,   2792,   2856,   2856,   2856,   2984,   2984,   3112,   3112,   3112,   3240,   3240,   3240,   3368,   3368,   3368,   3496,   3496,   3496,   3624,   3624,   3624,   3752,   3752,   3880,   3880,   3880,   4008,   4008,   4008,   4136,   4136,   4136,   4264,   4264,   4264,   4392,   4392,   4392,   4584,   4584,   4584,   4584,   4584,   4776,   4776,   4776,   4776,   4968,   4968], # I_tbs = 2
    [    40,    104,    152,    208,    272,    320,    392,    440,    504,    568,    616,    680,    744,    808,    872,    904,    968,   1032,   1096,   1160,   1224,   1256,   1320,   1384,   1416,   1480,   1544,   1608,   1672,   1736,   1800,   1864,   1928,   1992,   2024,   2088,   2152,   2216,   2280,   2344,   2408,   2472,   2536,   2536,   2600,   2664,   2728,   2792,   2856,   2856,   2984,   2984,   3112,   3112,   3240,   3240,   3368,   3368,   3496,   3496,   3624,   3624,   3624,   3752,   3752,   3880,   3880,   4008,   4008,   4136,   4136,   4264,   4264,   4392,   4392,   4392,   4584,   4584,   4584,   4776,   4776,   4776,   4776,   4968,   4968,   4968,   5160,   5160,   5160,   5352,   5352,   5352,   5352,   5544,   5544,   5544,   5736,   5736,   5736,   5736,   5992,   5992,   5992,   5992,   6200,   6200,   6200,   6200,   6456,   6456], # I_tbs = 3
    [    48,    120,    200,    264,    320,    408,    488,    552,    632,    696,    776,    840,    904,   1000,   1064,   1128,   1192,   1288,   1352,   1416,   1480,   1544,   1608,   1736,   1800,   1864,   1928,   1992,   2088,   2152,   2216,   2280,   2344,   2408,   2472,   2600,   2664,   2728,   2792,   2856,   2984,   2984,   3112,   3112,   3240,   3240,   3368,   3496,   3496,   3624,   3624,   3752,   3752,   3880,   4008,   4008,   4136,   4136,   4264,   4264,   4392,   4392,   4584,   4584,   4584,   4776,   4776,   4968,   4968,   4968,   5160,   5160,   5160,   5352,   5352,   5544,   5544,   5544,   5736,   5736,   5736,   5992,   5992,   5992,   5992,   6200,   6200,   6200,   6456,   6456,   6456,   6456,   6712,   6712,   6712,   6968,   6968,   6968,   6968,   7224,   7224,   7224,   7480,   7480,   7480,   7480,   7736,   7736,   7736,   7992], # I_tbs = 4
    [    72,    152,    232,    320,    424,    504,    600,    680,    776,    872,    968,   1032,   1128,   1224,   1320,   1384,   1480,   1544,   1672,   1736,   1864,   1928,   2024,   2088,   2216,   2280,   2344,   2472,   2536,   2664,   2728,   2792,   2856,   2984,   3112,   3112,   3240,   3368,   3496,   3496,   3624,   3752,   3752,   3880,   4008,   4008,   4136,   4264,   4392,   4392,   4584,   4584,   4776,   4776,   4776,   4968,   4968,   5160,   5160,   5352,   5352,   5544,   5544,   5736,   5736,   5736,   5992,   5992,   5992,   6200,   6200,   6200,   6456,   6456,   6712,   6712,   6712,   6968,   6968,   6968,   7224,   7224,   7224,   7480,   7480,   7480,   7736,   7736,   7736,   7992,   7992,   7992,   8248,   8248,   8248,   8504,   8504,   8760,   8760,   8760,   8760,   9144,   9144,   9144,   9144,   9528,   9528,   9528,   9528,   9528], # I_tbs = 5
    [   320,    176,    288,    392,    504,    600,    712,    808,    936,   1032,   1128,   1224,   1352,   1480,   1544,   1672,   1736,   1864,   1992,   2088,   2216,   2280,   2408,   2472,   2600,   2728,   2792,   2984,   2984,   3112,   3240,   3368,   3496,   3496,   3624,   3752,   3880,   4008,   4136,   4136,   4264,   4392,   4584,   4584,   4776,   4776,   4968,   4968,   5160,   5160,   5352,   5352,   5544,   5736,   5736,   5992,   5992,   5992,   6200,   6200,   6456,   6456,   6456,   6712,   6712,   6968,   6968,   6968,   7224,   7224,   7480,   7480,   7736,   7736,   7736,   7992,   7992,   8248,   8248,   8248,   8504,   8504,   8760,   8760,   8760,   9144,   9144,   9144,   9144,   9528,   9528,   9528,   9528,   9912,   9912,   9912,  10296,  10296,  10296,  10296,  10680,  10680,  10680,  10680,  11064,  11064,  11064,  11448,  11448,  11448], # I_tbs = 6
    [   104,    232,    320,    472,    584,    712,    840,    968,   1096,   1224,   1320,   1480,   1608,   1672,   1800,   1928,   2088,   2216,   2344,   2472,   2536,   2664,   2792,   2984,   3112,   3240,   3368,   3368,   3496,   3624,   3752,   3880,   4008,   4136,   4264,   4392,   4584,   4584,   4776,   4968,   4968,   5160,   5352,   5352,   5544,   5736,   5736,   5992,   5992,   6200,   6200,   6456,   6456,   6712,   6712,   6712,   6968,   6968,   7224,   7224,   7480,   7480,   7736,   7736,   7992,   7992,   8248,   8248,   8504,   8504,   8760,   8760,   8760,   9144,   9144,   9144,   9528,   9528,   9528,   9912,   9912,   9912,  10296,  10296,  10296,  10680,  10680,  10680,  11064,  11064,  11064,  11448,  11448,  11448,  11448,  11832,  11832,  11832,  12216,  12216,  12216,  12576,  12576,  12576,  12960,  12960,  12960,  12960,  13536,  13536], # I_tbs = 7
    [   120,    248,    392,    536,    680,    808,    968,   1096,   1256,   1384,   1544,   1672,   1800,   1928,   2088,   2216,   2344,   2536,   2664,   2792,   2984,   3112,   3240,   3368,   3496,   3624,   3752,   3880,   4008,   4264,   4392,   4584,   4584,   4776,   4968,   4968,   5160,   5352,   5544,   5544,   5736,   5992,   5992,   6200,   6200,   6456,   6456,   6712,   6968,   6968,   7224,   7224,   7480,   7480,   7736,   7736,   7992,   7992,   8248,   8504,   8504,   8760,   8760,   9144,   9144,   9144,   9528,   9528,   9528,   9912,   9912,   9912,  10296,  10296,  10680,  10680,  10680,  11064,  11064,  11064,  11448,  11448,  11448,  11832,  11832,  12216,  12216,  12216,  12576,  12576,  12576,  12960,  12960,  12960,  13536,  13536,  13536,  13536,  14112,  14112,  14112,  14112,  14688,  14688,  14688,  14688,  15264,  15264,  15264,  15264], # I_tbs = 8
    [   136,    296,    456,    616,    776,    936,   1096,   1256,   1416,   1544,   1736,   1864,   2024,   2216,   2344,   2536,   2664,   2856,   2984,   3112,   3368,   3496,   3624,   3752,   4008,   4136,   4264,   4392,   4584,   4776,   4968,   5160,   5160,   5352,   5544,   5736,   5736,   5992,   6200,   6200,   6456,   6712,   6712,   6968,   6968,   7224,   7480,   7480,   7736,   7992,   7992,   8248,   8248,   8504,   8760,   8760,   9144,   9144,   9144,   9528,   9528,   9912,   9912,  10296,  10296,  10296,  10680,  10680,  11064,  11064,  11064,  11448,  11448,  11832,  11832,  11832,  12216,  12216,  12576,  12576,  12960,  12960,  12960,  13536,  13536,  13536,  13536,  14112,  14112,  14112,  14112,  14688,  14688,  14688,  15264,  15264,  15264,  15264,  15840,  15840,  15840,  16416,  16416,  16416,  16416,  16992,  16992,  16992,  16992,  17568], # I_tbs = 9
    [   152,    320,    504,    680,    872,   1032,   1224,   1384,   1544,   1736,   1928,   2088,   2280,   2472,   2664,   2792,   2984,   3112,   3368,   3496,   3752,   3880,   4008,   4264,   4392,   4584,   4776,   4968,   5160,   5352,   5544,   5736,   5736,   5992,   6200,   6200,   6456,   6712,   6712,   6968,   7224,   7480,   7480,   7736,   7992,   7992,   8248,   8504,   8504,   8760,   9144,   9144,   9144,   9528,   9528,   9912,   9912,  10296,  10296,  10680,  10680,  11064,  11064,  11448,  11448,  11448,  11832,  11832,  12216,  12216,  12576,  12576,  12960,  12960,  12960,  13536,  13536,  13536,  14112,  14112,  14112,  14688,  14688,  14688,  14688,  15264,  15264,  15264,  15840,  15840,  15840,  16416,  16416,  16416,  16992,  16992,  16992,  16992,  17568,  17568,  17568,  18336,  18336,  18336,  18336,  18336,  19080,  19080,  19080,  19080], # I_tbs = 10
    [   176,    376,    584,    776,   1000,   1192,   1384,   1608,   1800,   2024,   2216,   2408,   2600,   2792,   2984,   3240,   3496,   3624,   3880,   4008,   4264,   4392,   4584,   4776,   4968,   5352,   5544,   5736,   5992,   5992,   6200,   6456,   6712,   6968,   6968,   7224,   7480,   7736,   7736,   7992,   8248,   8504,   8760,   8760,   9144,   9144,   9528,   9528,   9912,   9912,  10296,  10680,  10680,  11064,  11064,  11448,  11448,  11832,  11832,  12216,  12216,  12576,  12576,  12960,  12960,  13536,  13536,  13536,  14112,  14112,  14112,  14688,  14688,  14688,  15264,  15264,  15840,  15840,  15840,  16416,  16416,  16416,  16992,  16992,  16992,  17568,  17568,  17568,  18336,  18336,  18336,  18336,  19080,  19080,  19080,  19080,  19848,  19848,  19848,  19848,  20616,  20616,  20616,  21384,  21384,  21384,  21384,  22152,  22152,  22152], # I_tbs = 11
    [   208,    440,    680,    904,   1128,   1352,   1608,   1800,   2024,   2280,   2472,   2728,   2984,   3240,   3368,   3624,   3880,   4136,   4392,   4584,   4776,   4968,   5352,   5544,   5736,   5992,   6200,   6456,   6712,   6712,   6968,   7224,   7480,   7736,   7992,   8248,   8504,   8760,   8760,   9144,   9528,   9528,   9912,   9912,  10296,  10680,  10680,  11064,  11064,  11448,  11832,  11832,  12216,  12216,  12576,  12576,  12960,  12960,  13536,  13536,  14112,  14112,  14112,  14688,  14688,  15264,  15264,  15264,  15840,  15840,  16416,  16416,  16416,  16992,  16992,  17568,  17568,  17568,  18336,  18336,  18336,  19080,  19080,  19080,  19080,  19848,  19848,  19848,  20616,  20616,  20616,  21384,  21384,  21384,  21384,  22152,  22152,  22152,  22920,  22920,  22920,  23688,  23688,  23688,  23688,  24496,  24496,  24496,  24496,  25456], # I_tbs = 12
    [   232,    488,    744,   1000,   1256,   1544,   1800,   2024,   2280,   2536,   2856,   3112,   3368,   3624,   3880,   4136,   4392,   4584,   4968,   5160,   5352,   5736,   5992,   6200,   6456,   6712,   6968,   7224,   7480,   7736,   7992,   8248,   8504,   8760,   9144,   9144,   9528,   9912,   9912,  10296,  10680,  10680,  11064,  11448,  11448,  11832,  12216,  12216,  12576,  12960,  12960,  13536,  13536,  14112,  14112,  14688,  14688,  14688,  15264,  15264,  15840,  15840,  16416,  16416,  16992,  16992,  16992,  17568,  17568,  18336,  18336,  18336,  19080,  19080,  19080,  19848,  19848,  19848,  20616,  20616,  20616,  21384,  21384,  21384,  22152,  22152,  22152,  22920,  22920,  22920,  23688,  23688,  23688,  24496,  24496,  24496,  25456,  25456,  25456,  25456,  26416,  26416,  26416,  26416,  27376,  27376,  27376,  27376,  28336,  28336], # I_tbs = 13
    [   264,    552,    840,   1128,   1416,   1736,   1992,   2280,   2600,   2856,   3112,   3496,   3752,   4008,   4264,   4584,   4968,   5160,   5544,   5736,   5992,   6200,   6456,   6968,   7224,   7480,   7736,   7992,   8248,   8504,   8760,   9144,   9528,   9912,   9912,  10296,  10680,  11064,  11064,  11448,  11832,  12216,  12216,  12576,  12960,  12960,  13536,  13536,  14112,  14112,  14688,  14688,  15264,  15264,  15840,  15840,  16416,  16416,  16992,  16992,  17568,  17568,  18336,  18336,  18336,  19080,  19080,  19848,  19848,  19848,  20616,  20616,  20616,  21384,  21384,  22152,  22152,  22152,  22920,  22920,  22920,  23688,  23688,  24496,  24496,  24496,  25456,  25456,  25456,  25456,  26416,  26416,  26416,  27376,  27376,  27376,  28336,  28336,  28336,  28336,  29296,  29296,  29296,  29296,  30576,  30576,  30576,  30576,  31704,  31704], # I_tbs = 14
    [   280,    600,    904,   1224,   1544,   1800,   2152,   2472,   2728,   3112,   3368,   3624,   4008,   4264,   4584,   4968,   5160,   5544,   5736,   6200,   6456,   6712,   6968,   7224,   7736,   7992,   8248,   8504,   8760,   9144,   9528,   9912,  10296,  10296,  10680,  11064,  11448,  11832,  11832,  12216,  12576,  12960,  12960,  13536,  13536,  14112,  14688,  14688,  15264,  15264,  15840,  15840,  16416,  16416,  16992,  16992,  17568,  17568,  18336,  18336,  18336,  19080,  19080,  19848,  19848,  20616,  20616,  20616,  21384,  21384,  22152,  22152,  22152,  22920,  22920,  23688,  23688,  23688,  24496,  24496,  24496,  25456,  25456,  25456,  26416,  26416,  26416,  27376,  27376,  27376,  28336,  28336,  28336,  29296,  29296,  29296,  29296,  30576,  30576,  30576,  30576,  31704,  31704,  31704,  31704,  32856,  32856,  32856,  34008,  34008], # I_tbs = 15
    [   320,    632,    968,   1288,   1608,   1928,   2280,   2600,   2984,   3240,   3624,   3880,   4264,   4584,   4968,   5160,   5544,   5992,   6200,   6456,   6712,   7224,   7480,   7736,   7992,   8504,   8760,   9144,   9528,   9912,   9912,  10296,  10680,  11064,  11448,  11832,  12216,  12216,  12576,  12960,  13536,  13536,  14112,  14112,  14688,  14688,  15264,  15840,  15840,  16416,  16416,  16992,  16992,  17568,  17568,  18336,  18336,  19080,  19080,  19848,  19848,  19848,  20616,  20616,  21384,  21384,  22152,  22152,  22152,  22920,  22920,  23688,  23688,  24496,  24496,  24496,  25456,  25456,  25456,  26416,  26416,  26416,  27376,  27376,  27376,  28336,  28336,  28336,  29296,  29296,  29296,  30576,  30576,  30576,  30576,  31704,  31704,  31704,  31704,  32856,  32856,  32856,  34008,  34008,  34008,  34008,  35160,  35160,  35160,  35160], # I_tbs = 16
    [   336,    696,   1064,   1416,   1800,   2152,   2536,   2856,   3240,   3624,   4008,   4392,   4776,   5160,   5352,   5736,   6200,   6456,   6712,   7224,   7480,   7992,   8248,   8760,   9144,   9528,   9912,  10296,  10296,  10680,  11064,  11448,  11832,  12216,  12576,  12960,  13536,  13536,  14112,  14688,  14688,  15264,  15264,  15840,  16416,  16416,  16992,  17568,  17568,  18336,  18336,  19080,  19080,  19848,  19848,  20616,  20616,  20616,  21384,  21384,  22152,  22152,  22920,  22920,  23688,  23688,  24496,  24496,  24496,  25456,  25456,  26416,  26416,  26416,  27376,  27376,  27376,  28336,  28336,  29296,  29296,  29296,  30576,  30576,  30576,  30576,  31704,  31704,  31704,  32856,  32856,  32856,  34008,  34008,  34008,  35160,  35160,  35160,  35160,  36696,  36696,  36696,  36696,  37888,  37888,  37888,  39232,  39232,  39232,  39232], # I_tbs = 17
    [   376,    776,   1160,   1544,   1992,   2344,   2792,   3112,   3624,   4008,   4392,   4776,   5160,   5544,   5992,   6200,   6712,   7224,   7480,   7992,   8248,   8760,   9144,   9528,   9912,  10296,  10680,  11064,  11448,  11832,  12216,  12576,  12960,  13536,  14112,  14112,  14688,  15264,  15264,  15840,  16416,  16416,  16992,  17568,  17568,  18336,  18336,  19080,  19080,  19848,  19848,  20616,  21384,  21384,  22152,  22152,  22920,  22920,  23688,  23688,  24496,  24496,  24496,  25456,  25456,  26416,  26416,  27376,  27376,  27376,  28336,  28336,  29296,  29296,  29296,  30576,  30576,  30576,  31704,  31704,  31704,  32856,  32856,  32856,  34008,  34008,  34008,  35160,  35160,  35160,  36696,  36696,  36696,  37888,  37888,  37888,  37888,  39232,  39232,  39232,  40576,  40576,  40576,  40576,  42368,  42368,  42368,  42368,  43816,  43816], # I_tbs = 18
    [   408,    840,   1288,   1736,   2152,   2600,   2984,   3496,   3880,   4264,   4776,   5160,   5544,   5992,   6456,   6968,   7224,   7736,   8248,   8504,   9144,   9528,   9912,  10296,  10680,  11064,  11448,  12216,  12576,  12960,  13536,  13536,  14112,  14688,  15264,  15264,  15840,  16416,  16992,  16992,  17568,  18336,  18336,  19080,  19080,  19848,  20616,  20616,  21384,  21384,  22152,  22152,  22920,  22920,  23688,  24496,  24496,  25456,  25456,  25456,  26416,  26416,  27376,  27376,  28336,  28336,  29296,  29296,  29296,  30576,  30576,  30576,  31704,  31704,  32856,  32856,  32856,  34008,  34008,  34008,  35160,  35160,  35160,  36696,  36696,  36696,  37888,  37888,  37888,  39232,  39232,  39232,  40576,  40576,  40576,  40576,  42368,  42368,  42368,  43816,  43816,  43816,  43816,  45352,  45352,  45352,  46888,  46888,  46888,  46888], # I_tbs = 19
    [   440,    904,   1384,   1864,   2344,   2792,   3240,   3752,   4136,   4584,   5160,   5544,   5992,   6456,   6968,   7480,   7992,   8248,   8760,   9144,   9912,  10296,  10680,  11064,  11448,  12216,  12576,  12960,  13536,  14112,  14688,  14688,  15264,  15840,  16416,  16992,  16992,  17568,  18336,  18336,  19080,  19848,  19848,  20616,  20616,  21384,  22152,  22152,  22920,  22920,  23688,  24496,  24496,  25456,  25456,  26416,  26416,  27376,  27376,  28336,  28336,  29296,  29296,  29296,  30576,  30576,  31704,  31704,  31704,  32856,  32856,  34008,  34008,  34008,  35160,  35160,  35160,  36696,  36696,  36696,  37888,  37888,  39232,  39232,  39232,  40576,  40576,  40576,  42368,  42368,  42368,  42368,  43816,  43816,  43816,  45352,  45352,  45352,  46888,  46888,  46888,  46888,  48936,  48936,  48936,  48936,  48936,  51024,  51024,  51024], # I_tbs = 20
    [   488,   1000,   1480,   1992,   2472,   2984,   3496,   4008,   4584,   4968,   5544,   5992,   6456,   6968,   7480,   7992,   8504,   9144,   9528,   9912,  10680,  11064,  11448,  12216,  12576,  12960,  13536,  14112,  14688,  15264,  15840,  15840,  16416,  16992,  17568,  18336,  18336,  19080,  19848,  19848,  20616,  21384,  21384,  22152,  22920,  22920,  23688,  24496,  24496,  25456,  25456,  26416,  26416,  27376,  27376,  28336,  28336,  29296,  29296,  30576,  30576,  31704,  31704,  31704,  32856,  32856,  34008,  34008,  35160,  35160,  35160,  36696,  36696,  36696,  37888,  37888,  39232,  39232,  39232,  40576,  40576,  40576,  42368,  42368,  42368,  43816,  43816,  43816,  45352,  45352,  45352,  46888,  46888,  46888,  46888,  48936,  48936,  48936,  48936,  51024,  51024,  51024,  51024,  52752,  52752,  52752,  52752,  55056,  55056,  55056], # I_tbs = 21
    [   520,   1064,   1608,   2152,   2664,   3240,   3752,   4264,   4776,   5352,   5992,   6456,   6968,   7480,   7992,   8504,   9144,   9528,  10296,  10680,  11448,  11832,  12576,  12960,  13536,  14112,  14688,  15264,  15840,  16416,  16992,  16992,  17568,  18336,  19080,  19080,  19848,  20616,  21384,  21384,  22152,  22920,  22920,  23688,  24496,  24496,  25456,  25456,  26416,  27376,  27376,  28336,  28336,  29296,  29296,  30576,  30576,  31704,  31704,  32856,  32856,  34008,  34008,  34008,  35160,  35160,  36696,  36696,  36696,  37888,  37888,  39232,  39232,  40576,  40576,  40576,  42368,  42368,  42368,  43816,  43816,  43816,  45352,  45352,  45352,  46888,  46888,  46888,  48936,  48936,  48936,  48936,  51024,  51024,  51024,  51024,  52752,  52752,  52752,  55056,  55056,  55056,  55056,  57336,  57336,  57336,  57336,  59256,  59256,  59256], # I_tbs = 22
    [   552,   1128,   1736,   2280,   2856,   3496,   4008,   4584,   5160,   5736,   6200,   6968,   7480,   7992,   8504,   9144,   9912,  10296,  11064,  11448,  12216,  12576,  12960,  13536,  14112,  14688,  15264,  15840,  16416,  16992,  17568,  18336,  19080,  19848,  19848,  20616,  21384,  22152,  22152,  22920,  23688,  24496,  24496,  25456,  25456,  26416,  27376,  27376,  28336,  28336,  29296,  29296,  30576,  30576,  31704,  31704,  32856,  32856,  34008,  34008,  35160,  35160,  36696,  36696,  37888,  37888,  37888,  39232,  39232,  40576,  40576,  40576,  42368,  42368,  43816,  43816,  43816,  45352,  45352,  45352,  46888,  46888,  46888,  48936,  48936,  48936,  51024,  51024,  51024,  51024,  52752,  52752,  52752,  55056,  55056,  55056,  55056,  57336,  57336,  57336,  57336,  59256,  59256,  59256,  59256,  61664,  61664,  61664,  61664,  63776], # I_tbs = 23
    [   584,   1192,   1800,   2408,   2984,   3624,   4264,   4968,   5544,   5992,   6712,   7224,   7992,   8504,   9144,   9912,  10296,  11064,  11448,  12216,  12960,  13536,  14112,  14688,  15264,  15840,  16416,  16992,  17568,  18336,  19080,  19848,  19848,  20616,  21384,  22152,  22920,  22920,  23688,  24496,  25456,  25456,  26416,  26416,  27376,  28336,  28336,  29296,  29296,  30576,  31704,  31704,  32856,  32856,  34008,  34008,  35160,  35160,  36696,  36696,  36696,  37888,  37888,  39232,  39232,  40576,  40576,  42368,  42368,  42368,  43816,  43816,  45352,  45352,  45352,  46888,  46888,  46888,  48936,  48936,  48936,  51024,  51024,  51024,  52752,  52752,  52752,  52752,  55056,  55056,  55056,  57336,  57336,  57336,  57336,  59256,  59256,  59256,  61664,  61664,  61664,  61664,  63776,  63776,  63776,  63776,  66592,  66592,  66592,  66592], # I_tbs = 24
    [   616,   1256,   1864,   2536,   3112,   3752,   4392,   5160,   5736,   6200,   6968,   7480,   8248,   8760,   9528,  10296,  10680,  11448,  12216,  12576,  13536,  14112,  14688,  15264,  15840,  16416,  16992,  17568,  18336,  19080,  19848,  20616,  20616,  21384,  22152,  22920,  23688,  24496,  24496,  25456,  26416,  26416,  27376,  28336,  28336,  29296,  29296,  30576,  31704,  31704,  32856,  32856,  34008,  34008,  35160,  35160,  36696,  36696,  37888,  37888,  39232,  39232,  40576,  40576,  40576,  42368,  42368,  43816,  43816,  43816,  45352,  45352,  46888,  46888,  46888,  48936,  48936,  48936,  51024,  51024,  51024,  52752,  52752,  52752,  55056,  55056,  55056,  55056,  57336,  57336,  57336,  59256,  59256,  59256,  61664,  61664,  61664,  61664,  63776,  63776,  63776,  63776,  66592,  66592,  66592,  66592,  68808,  68808,  68808,  71112], # I_tbs = 25
    [   632,   1288,   1928,   2600,   3240,   3880,   4584,   5160,   5992,   6456,   7224,   7736,   8504,   9144,   9912,  10296,  11064,  11832,  12576,  12960,  13536,  14112,  15264,  15840,  16416,  16992,  17568,  18336,  19080,  19848,  20616,  20616,  21384,  22152,  22920,  23688,  24496,  24496,  25456,  26416,  26416,  27376,  27376,  29296,  29296,  29296,  30576,  30576,  31704,  32856,  32856,  34008,  34008,  35160,  36696,  36696,  36696,  37888,  37888,  39232,  40576,  40576,  40576,  40576,  42368,  42368,  43816,  43816,  45352,  45352,  45352,  46888,  46888,  48936,  48936,  48936,  51024,  51024,  51024,  52752,  52752,  52752,  55056,  55056,  55056,  55056,  57336,  57336,  57336,  59256,  59256,  59256,  59256,  61664,  61664,  61664,  63776,  63776,  63776,  66592,  66592,  66592,  66592,  68808,  68808,  68808,  71112,  71112,  71112,  71112], # I_tbs = 26
    [   648,   1320,   1992,   2664,   3368,   4008,   4584,   5352,   5992,   6712,   7224,   7992,   8504,   9144,   9912,  10680,  11448,  11832,  12576,  12960,  14112,  14688,  15264,  15840,  16416,  16992,  17568,  18336,  19080,  19848,  20616,  21384,  22152,  22920,  22920,  23688,  24496,  25456,  25456,  26416,  27376,  27376,  28336,  29296,  29296,  30576,  31704,  31704,  32856,  32856,  34008,  34008,  35160,  35160,  36696,  36696,  37888,  37888,  39232,  39232,  40576,  40576,  42368,  42368,  43816,  43816,  43816,  45352,  45352,  46888,  46888,  46888,  48936,  48936,  48936,  51024,  51024,  51024,  52752,  52752,  52752,  55056,  55056,  55056,  57336,  57336,  57336,  59256,  59256,  59256,  59256,  61664,  61664,  61664,  63776,  63776,  63776,  63776,  66592,  66592,  66592,  66592,  68808,  68808,  68808,  71112,  71112,  71112,  71112,  73712], # I_tbs = 27
    [   680,   1384,   2088,   2792,   3496,   4264,   4968,   5544,   6200,   6968,   7736,   8504,   9144,   9912,  10680,  11064,  11832,  12576,  13536,  14112,  14688,  15264,  16416,  16992,  17568,  18336,  19080,  19848,  20616,  21384,  22152,  22152,  22920,  23688,  24496,  25456,  26416,  26416,  27376,  28336,  29296,  29296,  30576,  30576,  31704,  32856,  32856,  34008,  34008,  35160,  35160,  36696,  36696,  37888,  39232,  39232,  40576,  40576,  42368,  42368,  42368,  43816,  43816,  45352,  45352,  46888,  46888,  46888,  48936,  48936,  48936,  51024,  51024,  52752,  52752,  52752,  55056,  55056,  55056,  57336,  57336,  57336,  59256,  59256,  59256,  61664,  61664,  61664,  61664,  63776,  63776,  63776,  66592,  66592,  66592,  66592,  68808,  68808,  68808,  71112,  71112,  71112,  73712,  73712,  73712,  75376,  75376,  76208,  76208,  76208], # I_tbs = 28
    [   712,   1480,   2216,   2984,   3752,   4392,   5160,   5992,   6712,   7480,   8248,   8760,   9528,  10296,  11064,  11832,  12576,  13536,  14112,  14688,  15840,  16416,  16992,  17568,  18336,  19080,  19848,  20616,  21384,  22152,  22920,  23688,  24496,  25456,  26416,  26416,  27376,  28336,  29296,  29296,  30576,  31704,  31704,  32856,  34008,  34008,  35160,  35160,  36696,  36696,  37888,  39232,  39232,  40576,  40576,  42368,  42368,  43816,  43816,  45352,  45352,  45352,  46888,  46888,  48936,  48936,  48936,  51024,  51024,  52752,  52752,  52752,  55056,  55056,  55056,  57336,  57336,  57336,  59256,  59256,  59256,  61664,  61664,  61664,  63776,  63776,  63776,  66592,  66592,  66592,  66592,  68808,  68808,  68808,  71112,  71112,  71112,  73712,  73712,  73712,  75376,  76208,  76208,  76208,  78704,  78704,  78704,  81176,  81176,  81176], # I_tbs = 29
    [   776,   1544,   2344,   3112,   3880,   4776,   5544,   6200,   6968,   7736,   8504,   9528,  10296,  11064,  11832,  12576,  13536,  14112,  14688,  15840,  16416,  16992,  18336,  19080,  19848,  20616,  21384,  22152,  22920,  23688,  24496,  25456,  25456,  26416,  27376,  28336,  29296,  29296,  30576,  31704,  31704,  32856,  34008,  34008,  35160,  36696,  36696,  37888,  37888,  39232,  40576,  40576,  42368,  42368,  43816,  43816,  45352,  45352,  46888,  46888,  46888,  48936,  48936,  51024,  51024,  51024,  52752,  52752,  55056,  55056,  55056,  57336,  57336,  57336,  59256,  59256,  59256,  61664,  61664,  63776,  63776,  63776,  63776,  66592,  66592,  66592,  68808,  68808,  68808,  71112,  71112,  71112,  73712,  73712,  75376,  75376,  76208,  76208,  78704,  78704,  78704,  81176,  81176,  81176,  81176,  84760,  84760,  84760,  84760,  87936], # I_tbs = 30
    [   808,   1608,   2472,   3240,   4136,   4968,   5736,   6456,   7480,   8248,   9144,   9912,  10680,  11448,  12216,  12960,  14112,  14688,  15840,  16416,  17568,  18336,  19080,  19848,  20616,  21384,  22152,  22920,  23688,  24496,  25456,  26416,  27376,  28336,  29296,  29296,  30576,  31704,  31704,  32856,  34008,  35160,  35160,  36696,  36696,  37888,  39232,  39232,  40576,  40576,  42368,  42368,  43816,  45352,  45352,  46888,  46888,  46888,  48936,  48936,  51024,  51024,  52752,  52752,  52752,  55056,  55056,  55056,  57336,  57336,  59256,  59256,  59256,  61664,  61664,  63776,  63776,  63776,  66592,  66592,  66592,  68808,  68808,  68808,  71112,  71112,  71112,  73712,  73712,  73712,  75376,  76208,  76208,  78704,  78704,  78704,  81176,  81176,  81176,  81176,  84760,  84760,  84760,  84760,  87936,  87936,  87936,  87936,  90816,  90816], # I_tbs = 31
    [   840,   1672,   2536,   3368,   4264,   5160,   5992,   6712,   7736,   8504,   9528,  10296,  11064,  11832,  12960,  13536,  14688,  15264,  16416,  16992,  17568,  19080,  19848,  20616,  21384,  22152,  22920,  23688,  24496,  25456,  26416,  27376,  28336,  29296,  29296,  30576,  31704,  32856,  32856,  34008,  35160,  35160,  36696,  37888,  37888,  39232,  40576,  40576,  42368,  42368,  43816,  43816,  45352,  46888,  46888,  46888,  48936,  48936,  51024,  51024,  52752,  52752,  52752,  55056,  55056,  57336,  57336,  57336,  59256,  59256,  61664,  61664,  61664,  63776,  63776,  63776,  66592,  66592,  66592,  68808,  68808,  71112,  71112,  71112,  73712,  73712,  73712,  75376,  76208,  76208,  78704,  78704,  78704,  81176,  81176,  81176,  84760,  84760,  84760,  84760,  87936,  87936,  87936,  87936,  90816,  90816,  90816,  93800,  93800,  93800], # I_tbs = 32
    [   968,   1992,   2984,   4008,   4968,   5992,   6968,   7992,   8760,   9912,  10680,  11832,  12960,  13536,  14688,  15840,  16992,  17568,  19080,  19848,  20616,  21384,  22920,  23688,  24496,  25456,  26416,  27376,  28336,  29296,  30576,  31704,  32856,  34008,  35160,  35160,  36696,  37888,  39232,  39232,  40576,  40576,  42368,  43816,  43816,  45352,  46888,  46888,  48936,  48936,  51024,  51024,  52752,  52752,  55056,  55056,  57336,  57336,  59256,  59256,  59256,  61664,  61664,  63776,  63776,  63776,  66592,  66592,  68808,  68808,  71112,  71112,  71112,  73712,  75376,  76208,  76208,  76208,  78704,  78704,  81176,  81176,  81176,  81176,  84760,  84760,  84760,  87936,  87936,  87936,  90816,  90816,  90816,  93800,  93800,  93800,  93800,  97896,  97896,  97896,  97896,  97896,  97896,  97896,  97896,  97896,  97896,  97896,  97896,  97896], # I_tbs = 33
    [  1032,   2088,   3112,   4264,   5160,   6200,   7224,   8504,   9528,  10296,  11448,  12576,  13536,  14688,  15840,  16992,  17568,  19080,  19848,  20616,  22152,  22920,  24496,  25456,  26416,  27376,  28336,  29296,  30576,  31704,  32856,  34008,  35160,  35160,  36696,  37888,  39232,  39232,  40576,  42368,  42368,  43816,  45352,  46888,  46888,  48936,  48936,  51024,  51024,  52752,  52752,  55056,  55056,  57336,  57336,  59256,  59256,  61664,  61664,  63776,  63776,  63776,  66592,  66592,  68808,  68808,  71112,  71112,  71112,  73712,  75376,  76208,  76208,  78704,  78704,  78704,  81176,  81176,  81176,  84760,  84760,  84760,  87936,  87936,  87936,  90816,  90816,  93800,  93800,  93800,  93800,  97896,  97896,  97896,  97896, 101840, 101840, 101840, 105528, 105528, 105528, 105528, 105528, 105528, 105528, 105528, 105528, 105528, 105528, 105528], # I_tbs = 34
    [  1096,   2216,   3240,   4392,   5544,   6712,   7736,   8760,   9912,  11064,  12216,  12960,  14112,  15264,  16416,  17568,  18336,  19848,  20616,  22152,  22920,  24496,  25456,  26416,  27376,  28336,  29296,  30576,  31704,  32856,  34008,  35160,  36696,  37888,  37888,  39232,  40576,  42368,  42368,  43816,  45352,  46888,  46888,  48936,  48936,  51024,  51024,  52752,  52752,  55056,  55056,  57336,  57336,  59256,  59256,  61664,  61664,  63776,  63776,  66592,  66592,  68808,  68808,  71112,  71112,  73712,  73712,  75376,  76208,  76208,  78704,  78704,  81176,  81176,  81176,  84760,  84760,  84760,  87936,  87936,  87936,  90816,  90816,  93800,  93800,  93800,  93800,  97896,  97896,  97896,  97896, 101840, 101840, 101840, 105528, 105528, 105528, 107832, 110136, 110136, 110136, 110136, 112608, 115040, 115040, 115040, 117256, 119816, 119816, 119816], # I_tbs = 35
    [  1160,   2280,   3496,   4584,   5736,   6968,   7992,   9144,  10296,  11448,  12576,  13536,  14688,  15840,  16992,  18336,  19848,  20616,  22152,  22920,  24496,  25456,  26416,  27376,  28336,  29296,  30576,  31704,  32856,  34008,  35160,  36696,  37888,  39232,  40576,  40576,  42368,  43816,  45352,  45352,  46888,  48936,  48936,  51024,  51024,  52752,  55056,  55056,  57336,  57336,  59256,  59256,  61664,  61664,  63776,  63776,  66592,  66592,  68808,  68808,  71112,  71112,  73712,  73712,  75376,  76208,  76208,  78704,  78704,  81176,  81176,  81176,  84760,  84760,  84760,  87936,  87936,  90816,  90816,  90816,  93800,  93800,  93800,  97896,  97896,  97896, 101840, 101840, 101840, 101840, 105528, 105528, 107832, 107832, 110136, 110136, 112608, 112608, 115040, 115040, 117256, 117256, 117256, 119816, 119816, 119816, 124464, 124464, 125808, 125808], # I_tbs = 36
    [  1224,   2472,   3752,   4968,   6200,   7480,   8760,   9912,  11064,  12384,  13536,  14688,  15840,  17568,  18336,  19848,  21384,  22152,  23688,  24496,  26416,  27376,  28336,  29296,  30576,  31704,  32856,  35160,  35160,  36696,  37888,  39232,  40576,  42368,  43816,  43816,  45352,  46888,  48936,  48936,  51024,  52752,  52752,  55056,  55056,  57336,  57336,  59256,  61664,  61664,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,  76208,  76208,  78704,  78704,  81176,  81176,  81176,  84760,  84760,  87936,  87936,  87936,  90816,  90816,  93800,  93800,  93800,  97896,  97896,  97896, 101840, 101840, 101840, 105528, 105528, 107832, 107832, 110136, 110136, 112608, 112608, 115040, 115040, 115040, 117256, 119816, 119816, 119816, 124464, 125808, 125808, 125808, 128496, 128496, 128496, 133208, 133208, 133208, 133208, 137792], # I_tbs = 37
]

# Convert TBS table to NumPy array for higher performance
TBS_TABLE_NP = np.array(TBS_TABLE)

# Table information
print(f"TBS table initialization complete: {TBS_TABLE_NP.shape[0]} rows x {TBS_TABLE_NP.shape[1]} columns, data type: {TBS_TABLE_NP.dtype}")

# ===================================================================
# Core Calculation Functions
# ===================================================================

def bsr_index_to_bytes(index):
    if not isinstance(index, (int, float)) or pd.isna(index) or index < 0:
        return 0
    index = int(index)
    if index >= len(BSR_LEVEL_TO_BYTES):
        return 150000
    return BSR_LEVEL_TO_BYTES[index]

def get_tbs_in_bits(itbs, n_rb):
    """
    Lookup transport block size from TBS table (in bits)
    
    Parameters:
        itbs (int): TBS index, range 0-37 (I_TBS)
        n_rb (int): Resource block count, range 1-110 (N_PRB)
    
    Returns:
        int: Transport block size (bits), returns 0 if input is invalid
    
    Note:
        - I_TBS starts from 0, directly corresponds to array row index
        - N_PRB starts from 1, corresponds to array column index n_rb - 1
    """
    # Parameter validation
    if not isinstance(itbs, (int, float)) or pd.isna(itbs):
        return 0
    if not isinstance(n_rb, (int, float)) or pd.isna(n_rb):
        return 0
    
    itbs = int(itbs)
    n_rb = int(n_rb)
    
    # Index range check
    if itbs < 0 or itbs >= TBS_TABLE_NP.shape[0]:  # I_TBS: 0-37
        return 0
    if n_rb < 1 or n_rb > TBS_TABLE_NP.shape[1]:   # N_PRB: 1-110
        return 0
    
    # Use NumPy array for fast index lookup
    # itbs directly as row index, n_rb needs -1 as column index
    return TBS_TABLE_NP[itbs, n_rb - 1]

# BSR upper and lower bounds table (for more precise calculation)
BSR_LOWER_BOUNDS = [ 0,  0, 10, 12, 14, 17, 19, 22, 26, 31, 36, 42, 49, 57, 67, 78,
    91,107,125,146,171,200,234,274,321,376,440,515,603,706,826,967,
   1132,1326,1552,1817,2127,2490,2915,3413,3995,4677,5476,6411,7505,
   8787,10287,12043,14099,16507,19325,22624,26487,31009,36304,42502,
   49759,58255,68201,79846,93479,109439,128125, 150000]

BSR_UPPER_BOUNDS = [ 0, 10, 12, 14, 17, 19, 22, 26, 31, 36, 42, 49, 57, 67, 78, 91,
   107,125,146,171,200,234,274,321,376,440,515,603,706,826,967,1132,
   1326,1552,1817,2127,2490,2915,3413,3995,4677,5476,6411,7505,8787,
  10287,12043,14099,16507,19325,22624,26487,31009,36304,42502,49759,
  58255,68201,79846,93479,109439,128125,150000, 150000]

# ===================================================================
# Function to calculate base station load (modeled after Jupyter notebook)
# ===================================================================
def calculate_bs_load(df_grant, bsr_records):
    """
    Calculate base station load for each BSR period
    Uses RB (Resource Block) utilization instead of grant count for more accurate reflection of base station load
    """
    bs_load_per_bsr = []
    max_rb_per_ms = 60  # Assume max available RBs per millisecond (similar to Jupyter settings)
    
    for i in range(len(bsr_records) - 1):
        current_bsr_sfn = bsr_records[i]['SFN']
        next_bsr_sfn = bsr_records[i + 1]['SFN']
        
        # Count total RB usage within BSR window as load indicator
        grant_mask = (df_grant['SFN'] > current_bsr_sfn) & (df_grant['SFN'] <= next_bsr_sfn)
        
        # Calculate total RB usage within window
        if 'Num_RBs' in df_grant.columns:
            rb_in_window = df_grant.loc[grant_mask, 'Num_RBs'].sum()
        else:
            # If no Num_RBs column, fallback to grant count method
            rb_in_window = len(df_grant[grant_mask]) * 10  # Assume 10 RBs per grant on average
        
        # Calculate load: (total RBs used / window duration) / max RBs per millisecond
        window_duration = next_bsr_sfn - current_bsr_sfn
        if window_duration > 0:
            load = (rb_in_window / window_duration) / max_rb_per_ms
            load = min(load, 1.0)  # Normalize to 0-1, ensure not exceeding 1.0
        else:
            load = 0.0
            
        bs_load_per_bsr.append(load)
    
    # Use default load for the last BSR
    bs_load_per_bsr.append(0.5)
    
    return bs_load_per_bsr

# ===================================================================
# Time window calculation method based on BSR events (correct method)
# ===================================================================
def calculate_ratio_from_report(file_path):
    """
    Calculate demand/supply ratio based on BSR event time windows
    
    Core logic:
    1. Each BSR event defines a time window
    2. Calculate demand reported by BSR (considering overlap)
    3. Accumulate supply within window (from BSR+5ms to next BSR+4ms)
    4. Calculate ratio = accumulated supply / demand
    """
    
    # 1. Load data
    df = pd.read_csv(file_path, sep='\t', na_values='-')
    
    # Rename columns
    df.rename(columns={
        'RAN_Event_Unix_Timestamp': 'RAN_TS',
        'Bridge_Read_Timestamp': 'Bridge_TS', 
        'Python_Recv_Timestamp': 'Python_TS',
        'Cellular_Precise_Timestamp': 'Cellular_TS',
        'Current_SFN_SF': 'SFN',
        'Pipeline_Latency_ms': 'Latency',
        'LCG_0': 'LCG0',
        'LCG_1': 'LCG1', 
        'LCG_2': 'LCG2',
        'LCG_3': 'LCG3'
    }, inplace=True)
    
    # Ensure SFN is numeric type (no sorting, maintain original order)
    df['SFN'] = pd.to_numeric(df['SFN'], errors='coerce')
    
    # SFN processing will be done separately after extracting various events
    
    # 2. Extract BSR events
    lcg_cols = ['LCG0', 'LCG1', 'LCG2', 'LCG3']
    df_bsr = df[df[lcg_cols].notna().any(axis=1)].copy()
    
    # Get maximum index value for each BSR
    df_bsr['max_bsr_index'] = df_bsr[lcg_cols].max(axis=1)
    df_bsr = df_bsr[df_bsr['max_bsr_index'] > 0]  # Exclude all-zero BSRs
    
    # 3. Extract PUSCH transmission events (only new transmissions)
    df_pusch = df[(df['PUSCH_TB_Size'].notna()) & 
                  (df['PUSCH_TB_Size'] > 0) & 
                  (df['Redund_Ver'] == 0)].copy()
    
    # 4. Extract UL Grant events (calculated via TBS_Index and Num_RBs)
    df_grant = df[(df['TBS_Index'].notna()) & 
                  (df['TBS_Index'] >= 0) & 
                  (df['Num_RBs'].notna()) & 
                  (df['Num_RBs'] > 0)].copy()
    
    # Calculate bytes allocated by Grant
    df_grant['grant_bytes'] = df_grant.apply(
        lambda row: get_tbs_in_bits(row['TBS_Index'], row['Num_RBs']) / 8.0, 
        axis=1
    )
    df_grant = df_grant[df_grant['grant_bytes'] > 0]
    
    print(f"Found {len(df_bsr)} BSR events, {len(df_pusch)} PUSCH Tx events, {len(df_grant)} UL Grant events")
    
    # 3.1 Process sorting and SFN wrapping for each event DataFrame separately
    def process_sfn_wrapping(df_event):
        """Process SFN wrapping for a single DataFrame - maintain original data reception order"""
        if len(df_event) == 0:
            return df_event
            
        # Do not reorder! Maintain original row order from data file
        # This order is the true data reception order
        
        # Handle SFN wrapping: detect sudden decrease in SFN
        adjusted_sfns = []
        wrap_count = 0
        last_sfn = None
        
        for sfn in df_event['SFN']:
            if pd.notna(sfn):
                # Use same wrapping detection logic as Jupyter code: consider wrapping if current SFN is less than previous
                if last_sfn is not None and sfn < last_sfn:
                    wrap_count += 1
                    print(f"SFN wrapping detected: {last_sfn} -> {sfn}, wrap_count = {wrap_count}")
                
                adjusted_sfn = wrap_count * 10240 + sfn
                adjusted_sfns.append(adjusted_sfn)
                last_sfn = sfn
            else:
                adjusted_sfns.append(np.nan)
        
        df_event['SFN'] = adjusted_sfns
        return df_event
    
    # Process SFN wrapping for all event types
    df_bsr = process_sfn_wrapping(df_bsr)
    df_pusch = process_sfn_wrapping(df_pusch)  
    df_grant = process_sfn_wrapping(df_grant)
    
    print(f"After SFN wrapping: BSR events={len(df_bsr)}, PUSCH events={len(df_pusch)}, Grant events={len(df_grant)}")
    
    # 4. Calculate base station load
    bsr_records = df_bsr.to_dict('records')
    bs_load_list = calculate_bs_load(df_grant, bsr_records)
    
    # 5. Calculate ratio based on BSR events
    results = []
    
    for i, bsr in enumerate(bsr_records):
        bsr_sfn = bsr['SFN']
        bsr_index = int(bsr['max_bsr_index'])
        
        # Get BSR upper and lower bounds
        upper_requested = BSR_UPPER_BOUNDS[min(bsr_index, len(BSR_UPPER_BOUNDS)-1)]
        lower_requested = BSR_LOWER_BOUNDS[min(bsr_index, len(BSR_LOWER_BOUNDS)-1)]
        
        # Calculate overlap (transmissions within 1-4ms after BSR)
        overlap_mask = (df_pusch['SFN'] > bsr_sfn) & (df_pusch['SFN'] <= bsr_sfn + 4)
        overlap_bytes = df_pusch.loc[overlap_mask, 'PUSCH_TB_Size'].sum()
        
        # Adjust demand (considering overlap)
        if overlap_bytes >= lower_requested:
            adjusted_requested = upper_requested
        else:
            adjusted_requested = max(upper_requested - overlap_bytes, 0)
        
        # Determine supply window
        if i < len(bsr_records) - 1:
            next_bsr_sfn = bsr_records[i + 1]['SFN']
            window_end = next_bsr_sfn + 4
        else:
            # Last BSR, use fixed window
            window_end = bsr_sfn + 100
        
        # Accumulate supply within window (BSR+5ms to window end)
        supply_mask = (df_pusch['SFN'] >= bsr_sfn + 5) & (df_pusch['SFN'] <= window_end)
        allocated_bytes_pusch = df_pusch.loc[supply_mask, 'PUSCH_TB_Size'].sum()
        
        # Accumulate Grant allocation within window (BSR+5ms to window end)
        grant_mask = (df_grant['SFN'] >= bsr_sfn + 5) & (df_grant['SFN'] <= window_end)
        allocated_bytes_grant = df_grant.loc[grant_mask, 'grant_bytes'].sum()
        
        # Calculate both ratios
        ratio_pusch = allocated_bytes_pusch / adjusted_requested if adjusted_requested > 0 else 0
        ratio_grant = allocated_bytes_grant / adjusted_requested if adjusted_requested > 0 else 0
        
        results.append({
            'SFN': bsr_sfn,
            'BSR_index': bsr_index,
            'requested_bytes': adjusted_requested,
            'allocated_bytes_pusch': allocated_bytes_pusch,
            'allocated_bytes_grant': allocated_bytes_grant,
            'overlap_bytes': overlap_bytes,
            'ratio_pusch': ratio_pusch,
            'ratio_grant': ratio_grant,
            'bs_load': bs_load_list[i] if i < len(bs_load_list) else 0.5
        })
    
    # Convert to DataFrame
    df_results = pd.DataFrame(results)
    
    if len(df_results) == 0:
        print("No valid BSR events found")
        return pd.DataFrame()
    
    # 5. Smoothing processing (time window-based method, consistent with Jupyter Notebook logic)
    smoothed_window_ms = 20  # Time window defined as 20 milliseconds
    alpha = 0.6
    
    # Add new empty columns to DataFrame to store smoothed results
    df_results['smoothed_ratio_pusch'] = np.nan
    df_results['smoothed_ratio_grant'] = np.nan
    df_results['smoothed_bs_load'] = np.nan
    
    # Iterate through each row (each BSR event) to perform smoothing calculation
    for k in range(len(df_results)):
        # Get current event's timestamp (SFN) and original values
        current_sfn = df_results.iloc[k]['SFN']
        current_ratio_pusch = df_results.iloc[k]['ratio_pusch']
        current_ratio_grant = df_results.iloc[k]['ratio_grant']
        current_load = df_results.iloc[k]['bs_load']
        
        # Define boundaries of historical time window
        history_start_sfn = current_sfn - smoothed_window_ms
        
        # Use Pandas boolean indexing to efficiently filter historical data within time window
        # Condition 1: SFN less than current SFN (look only at past)
        # Condition 2: SFN greater than historical window start SFN
        history_mask = (df_results['SFN'] < current_sfn) & (df_results['SFN'] > history_start_sfn)
        
        # Filter historical data
        history_df = df_results[history_mask]
        
        # --- Smooth PUSCH Ratio ---
        history_ratios_pusch = history_df['ratio_pusch']
        if history_ratios_pusch.empty:
            # If no historical data, smoothed value equals current value
            smoothed_val = current_ratio_pusch
        else:
            history_mean = history_ratios_pusch.mean()
            smoothed_val = alpha * current_ratio_pusch + (1 - alpha) * history_mean
        # 将计算出的平滑值赋给当前行
        df_results.loc[df_results.index[k], 'smoothed_ratio_pusch'] = smoothed_val
            
        # --- 平滑 Grant Ratio (逻辑相同) ---
        history_ratios_grant = history_df['ratio_grant']
        if history_ratios_grant.empty:
            smoothed_val = current_ratio_grant
        else:
            history_mean = history_ratios_grant.mean()
            smoothed_val = alpha * current_ratio_grant + (1 - alpha) * history_mean
        df_results.loc[df_results.index[k], 'smoothed_ratio_grant'] = smoothed_val
        
        # --- 平滑 BS Load (逻辑相同) ---
        history_loads = history_df['bs_load']
        if history_loads.empty:
            smoothed_val = current_load
        else:
            history_mean = history_loads.mean()
            smoothed_val = alpha * current_load + (1 - alpha) * history_mean
        df_results.loc[df_results.index[k], 'smoothed_bs_load'] = smoothed_val
    
    print("\n--- BSR Window Analysis Results ---")
    print(df_results[['SFN', 'BSR_index', 'requested_bytes', 
                      'allocated_bytes_pusch', 'allocated_bytes_grant',
                      'ratio_pusch', 'ratio_grant']].head(20))
    
    # 打印预览，检查新列是否已正确填充
    print("\n--- 分析结果预览 (平滑后) ---")
    print(df_results[['SFN', 'ratio_pusch', 'smoothed_ratio_pusch', 'bs_load', 'smoothed_bs_load']].head(10))
    
    # 6. 生成grant和请求资源的ratio，以及pusch和请求资源的ratio图表
    plt.figure(figsize=(18, 8))
    plt.plot(df_results['SFN'], df_results['smoothed_ratio_grant'], 
             label=f'Grant/Request Ratio - Smoothed({smoothed_window_ms}ms)', alpha=0.8, color='purple')
    plt.plot(df_results['SFN'], df_results['smoothed_ratio_pusch'], 
             label=f'PUSCH/Request Ratio - Smoothed({smoothed_window_ms}ms)', alpha=0.8, linestyle='--', color='green')
    plt.axhline(y=1.0, color='r', linestyle='--', label='Balance Line (Ratio = 1.0)')
    plt.xlabel('SFN (ms timeline)')
    plt.ylabel('Supply/Demand Ratio')
    plt.title('Resource Allocation Ratio Analysis: Grant vs PUSCH')
    plt.legend()
    plt.grid(True)
    plt.ylim(0, 5)
    
    # 保存图表
    output_plot = 'bsr_window_ratio_analysis.png'
    plt.savefig(output_plot, dpi=150, bbox_inches='tight')
    print(f"图表已保存为: {output_plot}")
    
    # 保存数据
    output_csv = 'bsr_window_ratio_data.csv'
    df_results.to_csv(output_csv, index=False)
    print(f"详细数据已保存为: {output_csv}")
    
    # 统计信息 (基于20ms时间窗口平滑)
    print("\n=== 统计信息 (20ms时间窗口平滑) ===")
    print("PUSCH (实际传输) - 平滑后:")
    print(f"  平均比率: {df_results['smoothed_ratio_pusch'].mean():.3f}")
    print(f"  中位数比率: {df_results['smoothed_ratio_pusch'].median():.3f}")
    print(f"  比率 < 1 (供给不足): {(df_results['smoothed_ratio_pusch'] < 1).sum()} ({(df_results['smoothed_ratio_pusch'] < 1).sum()/len(df_results)*100:.1f}%)")
    print(f"  比率 >= 1 (供给充足): {(df_results['smoothed_ratio_pusch'] >= 1).sum()} ({(df_results['smoothed_ratio_pusch'] >= 1).sum()/len(df_results)*100:.1f}%)")
    
    print("\nGrant (TBS查表预测) - 平滑后:")
    print(f"  平均比率: {df_results['smoothed_ratio_grant'].mean():.3f}")
    print(f"  中位数比率: {df_results['smoothed_ratio_grant'].median():.3f}")
    print(f"  比率 < 1 (供给不足): {(df_results['smoothed_ratio_grant'] < 1).sum()} ({(df_results['smoothed_ratio_grant'] < 1).sum()/len(df_results)*100:.1f}%)")
    print(f"  比率 >= 1 (供给充足): {(df_results['smoothed_ratio_grant'] >= 1).sum()} ({(df_results['smoothed_ratio_grant'] >= 1).sum()/len(df_results)*100:.1f}%)")
    
    # 比较PUSCH和Grant (基于20ms时间窗口平滑)
    print("\n=== PUSCH vs Grant 对比 (20ms时间窗口平滑) ===")
    
    # 使用平滑后的比率进行对比
    smooth_ratio_diff = df_results['smoothed_ratio_pusch'] - df_results['smoothed_ratio_grant']
    print(f"平均比率差异 (PUSCH - Grant): {smooth_ratio_diff.mean():.3f}")
    print(f"PUSCH比率 > Grant比率 的情况: {(smooth_ratio_diff > 0).sum()} ({(smooth_ratio_diff > 0).sum()/len(df_results)*100:.1f}%)")
    print(f"PUSCH比率 < Grant比率 的情况: {(smooth_ratio_diff < 0).sum()} ({(smooth_ratio_diff < 0).sum()/len(df_results)*100:.1f}%)")
    print(f"PUSCH比率 = Grant比率 的情况: {(abs(smooth_ratio_diff) < 0.001).sum()} ({(abs(smooth_ratio_diff) < 0.001).sum()/len(df_results)*100:.1f}%)")
    
    # 同时保留原始字节差异对比作为参考
    print("\n=== 原始字节差异对比 (参考) ===")
    diff = df_results['allocated_bytes_pusch'] - df_results['allocated_bytes_grant']
    print(f"平均差异 (PUSCH - Grant): {diff.mean():.1f} bytes")
    print(f"PUSCH > Grant 的情况: {(diff > 0).sum()} ({(diff > 0).sum()/len(df_results)*100:.1f}%)")
    print(f"PUSCH < Grant 的情况: {(diff < 0).sum()} ({(diff < 0).sum()/len(df_results)*100:.1f}%)")
    print(f"PUSCH = Grant 的情况: {(diff == 0).sum()} ({(diff == 0).sum()/len(df_results)*100:.1f}%)")
    
    try:
        plt.show()
    except:
        print("无法显示图形界面，请查看保存的图片文件")
    
    return df_results

# ===================================================================
# 主处理函数 (Main Processing Function) - 旧方法
# ===================================================================
def calculate_ratio_from_report_old(file_path):
    
    # 1. 加载和清洗数据
    # 使用制表符分隔，文件已有列名，"-"表示缺失值
    df = pd.read_csv(file_path, sep='\t', na_values='-')
    
    # 重命名列以匹配代码中的期望
    df.rename(columns={
        'RAN_Event_Unix_Timestamp': 'RAN_TS',
        'Bridge_Read_Timestamp': 'Bridge_TS', 
        'Python_Recv_Timestamp': 'Python_TS',
        'Cellular_Precise_Timestamp': 'Cellular_TS',
        'Current_SFN_SF': 'SFN',
        'Pipeline_Latency_ms': 'Latency',
        'LCG_0': 'LCG0',
        'LCG_1': 'LCG1', 
        'LCG_2': 'LCG2',
        'LCG_3': 'LCG3'
    }, inplace=True)
    
    # 确保SFN列为数值类型
    df['SFN'] = pd.to_numeric(df['SFN'], errors='coerce')

    # 2. 分离事件并计算Demand和Supply
    # --- BSR (Demand) ---
    df_bsr = df[df['LCG0'].notna() | df['LCG1'].notna()].copy()
    lcg_cols = ['LCG0', 'LCG1', 'LCG2', 'LCG3']
    df_bsr[lcg_cols] = df_bsr[lcg_cols].fillna(0)
    df_bsr['demand_bytes'] = df_bsr.apply(lambda row: sum(bsr_index_to_bytes(row[col]) for col in lcg_cols), axis=1)
    df_bsr = df_bsr[df_bsr['demand_bytes'] > 0][['SFN', 'demand_bytes']]

    # --- UL Grant (Predicted Supply) ---
    df_grant = df[df['TBS_Index'].notna() & (df['TBS_Index'] != -1)].copy()
    df_grant['supply_bytes_grant'] = df_grant.apply(lambda row: get_tbs_in_bits(row['TBS_Index'], row['Num_RBs']) / 8.0, axis=1)
    df_grant = df_grant[df_grant['supply_bytes_grant'] > 0][['SFN', 'supply_bytes_grant']]
    
    # --- PUSCH Tx (Actual Supply) ---
    df_pusch = df[df['PUSCH_TB_Size'].notna() & (df['Redund_Ver'] == 0)].copy() # 只考虑新传
    df_pusch.rename(columns={'PUSCH_TB_Size': 'supply_bytes_pusch'}, inplace=True)
    df_pusch = df_pusch[df_pusch['supply_bytes_pusch'] > 0][['SFN', 'supply_bytes_pusch']]

    print(f"Found {len(df_bsr)} BSR events, {len(df_grant)} UL Grant events, {len(df_pusch)} PUSCH Tx events.")

    # 3. 合并和对齐
    # 将两种Supply合并到一个DataFrame中，以SFN为索引
    df_supply = pd.merge(df_grant, df_pusch, on='SFN', how='outer')
    
    # 确保排序
    df_bsr = df_bsr.sort_values('SFN').drop_duplicates(subset='SFN', keep='last')
    df_supply = df_supply.sort_values('SFN')

    # 将Supply事件与之前的BSR事件对齐
    df_merged = pd.merge_asof(
        df_supply,
        df_bsr,
        on='SFN',
        direction='backward'
    )
    df_merged.dropna(subset=['demand_bytes'], inplace=True)

    # 4. 计算两种Ratio
    df_merged['ratio_grant'] = df_merged['demand_bytes'] / df_merged['supply_bytes_grant']
    df_merged['ratio_pusch'] = df_merged['demand_bytes'] / df_merged['supply_bytes_pusch']

    # 5. 平滑和可视化
    window_size = 20
    df_merged['smoothed_ratio_grant'] = df_merged['ratio_grant'].rolling(window=window_size, min_periods=1).mean()
    df_merged['smoothed_ratio_pusch'] = df_merged['ratio_pusch'].rolling(window=window_size, min_periods=1).mean()

    print("\n--- Result Preview ---")
    print(df_merged.head(20))
    
    # 生成图表并保存
    plt.figure(figsize=(18, 8))
    plt.plot(df_merged['SFN'], df_merged['smoothed_ratio_grant'], label=f'Ratio (UL Grant Supply) - Smoothed({window_size})', alpha=0.8)
    plt.plot(df_merged['SFN'], df_merged['smoothed_ratio_pusch'], label=f'Ratio (PUSCH Tx Supply) - Smoothed({window_size})', alpha=0.8, linestyle='--')
    plt.axhline(y=1.0, color='r', linestyle='--', label='Congestion Threshold (D/S = 1.0)')
    plt.xlabel('SFN (ms timeline)')
    plt.ylabel('Demand / Supply Ratio')
    plt.title('Ratio Analysis: Predicted (Grant) vs Actual (PUSCH)')
    plt.legend()
    plt.grid(True)
    plt.ylim(0, 5)
    
    # 保存图表
    output_plot = 'ratio_analysis_result.png'
    plt.savefig(output_plot, dpi=150, bbox_inches='tight')
    print(f"图表已保存为: {output_plot}")
    
    # 保存详细数据到CSV
    output_csv = 'ratio_analysis_data.csv'
    df_merged.to_csv(output_csv, index=False)
    print(f"详细数据已保存为: {output_csv}")
    
    try:
        plt.show()
    except:
        print("无法显示图形界面，请查看保存的图片文件")

    return df_merged

# ===================================================================
# 程序入口
# ===================================================================
if __name__ == "__main__":
    report_file_path = '/home/wuq/webrtc-checkout/logcode/diag_report.txt' # <-- 请替换为你的文件路径
    final_data = calculate_ratio_from_report(report_file_path)